package com.labafrique.creporter;

import com.codename1.capture.Capture;
import com.codename1.components.ImageViewer;
import com.codename1.components.InfiniteProgress;
import com.codename1.components.MediaPlayer;
import com.codename1.components.MultiButton;
import com.codename1.components.SpanLabel;
import static com.codename1.ui.CN.*;
import com.codename1.components.ToastBar;
import com.codename1.db.Cursor;
import com.codename1.db.Database;
import com.codename1.db.Row;
import com.codename1.ext.filechooser.FileChooser;
import com.codename1.googlemaps.MapContainer;
import com.codename1.io.ConnectionRequest;
import com.codename1.io.FileSystemStorage;
import com.codename1.io.JSONParser;
import com.codename1.io.Log;
import com.codename1.io.MultipartRequest;
import com.codename1.io.NetworkManager;
import com.codename1.io.Storage;
import com.codename1.io.Util;
import com.codename1.io.websocket.WebSocket;
import com.codename1.l10n.SimpleDateFormat;
import com.codename1.location.Location;
import com.codename1.location.LocationListener;
import com.codename1.location.LocationManager;
import com.codename1.maps.BoundingBox;
import com.codename1.maps.Coord;
import com.codename1.media.Media;
import com.codename1.media.MediaManager;
import com.codename1.messaging.Message;
import com.codename1.notifications.LocalNotification;
import com.codename1.ui.Button;
import com.codename1.ui.Command;
import com.codename1.ui.Component;
import com.codename1.ui.Dialog;
import com.codename1.ui.Form;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.ui.Container;
import com.codename1.ui.Display;
import com.codename1.ui.EncodedImage;
import com.codename1.ui.Font;
import com.codename1.ui.FontImage;
import com.codename1.ui.Image;
import com.codename1.ui.Label;
import com.codename1.ui.Tabs;
import com.codename1.ui.TextArea;
import com.codename1.ui.TextField;
import com.codename1.ui.Toolbar;
import com.codename1.ui.animations.CommonTransitions;
import com.codename1.ui.animations.Transition;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.layouts.FlowLayout;
import com.codename1.ui.layouts.GridLayout;
import com.codename1.ui.plaf.Style;
import com.codename1.ui.spinner.Picker;
import com.codename1.ui.util.ImageIO;
import com.codename1.util.Callback;
import com.codename1.util.StringUtil;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Vector;
import net.informaticalibera.cn1.nativelogreader.NativeLogs;



/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class MyApplication {

    private Form current, rod;
    private Resources theme;
    private static final String JS_API_KEY = "AIzaSyCC9HSProR_c3ETwPjN0LQpr3UScor8NCE";
    final String[] categories = {"General","Roads", "Drainage","Immigration","Traffic", "Health", "Customs", "Domestic Violence","Import and Export","Traffic","Private Sector", "Land Disputes","Private Sector","Judiciary"};
    private Form home;
    char sep; 
    String dir;
    Container picAdded, audioAdded, videoAdded;
    TextArea logs;
    final String URL = "http://localhost:9494/creporter/listener";
    final String SOCKET_URL = "ws://localhost:9494/socket";
    String caseLocation = "";
    String crash[] = {"smilewithjaji@gmail.com"};
    LocalNotification push;
    int pushCount = 0;
    
    public void loadAllData()
    {
            
        /*
        Response<String> res = Rest.get(URL+"/getCases/?t=cor&x=0").jsonContent().getAsString();
            try
            {
                Map map = new JSONParser()
                        .parseJSON(new InputStreamReader(new ByteArrayInputStream(res.getResponseData()
                                .getBytes())));
                if(map.size() < 1)
                {
                    return;
                }
                Set y = map.keySet();
                for(Object g: y)
                {
                    System.out.println(g+ "  "+map.get(g));
                }
                ArrayList results = (ArrayList) map.get("root");
                System.out.println(results.size()+" this is size o");
                Storage.getInstance().writeObject("AllData", results);
            }
            catch(Exception er)
            {
                er.printStackTrace();
            }
        */
    }
    
    
    public void buildSplash()
    {
        startWebSocket();
        if(!Storage.getInstance().exists("cor"))
        {
            Storage.getInstance().writeObject("cor", "0");
            ArrayList<Map> lx = new ArrayList();
            Storage.getInstance().writeObject("AllData", lx);
        }
        Form splash = new Form(new BorderLayout());
        splash.getTitleArea().setUIID("Container");
        Container x = new Container(new FlowLayout(Component.CENTER));
        x.addComponent(new InfiniteProgress());
        splash.addComponent("Center", x);
        splash.addShowListener(e -> callSerially(() -> {
            writeLocation();
            LocationManager.getLocationManager().setBackgroundLocationListener(BackgroundLocationListener.class);
            queryRunner("CREATE TABLE IF NOT EXISTS table1 (rtype varchar(30), code varchar(30), rtime datetime, isDraft varchar(6), category varchar(40), details text, address text, photo varchar(10), audio varchar(10), video varchar(10))");
            if(!Storage.getInstance().exists("phone") || !Storage.getInstance().exists("email"))
            {
                welcomeDetails("");
            }
            else
            {
                makeMain();
            }
            
        }));
        splash.show();
        
    }
    
    public void welcomeDetails(String s)
    {
        Form ff = new Form("Profile");
        if(s.equals("home"))
        {
            ff.getToolbar().setBackCommand("", ee -> home.showBack());
        }
        ff.setLayout(new BorderLayout());
        Container c = new Container(BoxLayout.y());
        c.setUIID("CNT1");
        c.addComponent(new Label("Your Name (Optional)", "RedLabel"));
        TextField t = new TextField();
        t.setText("");
        t.setUIID("TextFieldRed");
        c.addComponent(t);
        c.addComponent(new Label("Your Email", "RedLabel"));
        TextField m = new TextField();
        m.setUIID("TextFieldRed");
        c.addComponent(m);
        c.addComponent(new Label("Your Phone Number", "RedLabel"));
        TextField h = new TextField();
        h.setUIID("TextFieldRed");
        c.addComponent(h);
        Button done = new Button();
        FontImage.setMaterialIcon(done, FontImage.MATERIAL_DONE);
        c.addComponent(done);
        try
        {
            t.setText(Storage.getInstance().readObject("name").toString());
            m.setText(Storage.getInstance().readObject("email").toString());
            h.setText(Storage.getInstance().readObject("phone").toString());
        }catch(Exception er){}
        done.addActionListener(r -> {
            if(m.getText().length()<1 && h.getText().length() < 1)
            {
                ToastBar.showInfoMessage("Please provide either your email or phone number, or both");
                return;
            }
            try{
            Storage.getInstance().writeObject("name", t.getText());
            Storage.getInstance().writeObject("email", m.getText());
            Storage.getInstance().writeObject("phone", h.getText()); }catch(Exception er){}
            if(s.equals("home"))
            {
                home.showBack();
            }
            else
            {
                makeMain();
            }

        });
        ff.addComponent("Center", c);
        ff.show();
    }
    
    public void refreshPoints() {
        String ret = "error";
        try {
            ConnectionRequest request = new ConnectionRequest(URL+"/getPoints", false);
            NetworkManager.getInstance().addErrorListener((e) -> e.consume());
            NetworkManager.getInstance().addToQueueAndWait(request);
            if(request.getResponseData() == null)
            {
                
            }
             Map<String, Object> response = new JSONParser().parseJSON(new InputStreamReader(new ByteArrayInputStream(request.getResponseData()), "UTF-8"));
            if (response.get("results") != null) {
                ArrayList results = (ArrayList) response.get("root");
                if (results.size() > 0)
                {
                    for(Object y: results)
                    {
                        Map m = (Map) y;
                    }
                }
                    
            }
        } catch (Exception e) {
            e.printStackTrace();
            ret = "error";
        }
    }

    public void init(Object context) {
        
        // use two network threads instead of one
        NativeLogs.initNativeLogs();
        sep = FileSystemStorage.getInstance().getFileSystemSeparator();
        dir = FileSystemStorage.getInstance().getAppHomePath() + sep + "creporter"+sep;
        updateNetworkThreadCount(2);
        if(!FileSystemStorage.getInstance().exists(dir))
        {
            FileSystemStorage.getInstance().mkdir(dir);
            
        }
        if(!FileSystemStorage.getInstance().exists(dir+"temp"+sep))
        {
            FileSystemStorage.getInstance().mkdir(dir+"temp"+sep);
        }
        if(!FileSystemStorage.getInstance().exists(dir+"temp"+sep+"empty.jaji"))
        {
            String b="";
            try
            {
                FileSystemStorage.getInstance().openOutputStream(dir+"temp"+sep+"empty.jaji").write(b.getBytes());
            }
            catch(IOException ex)
            {
               ex.printStackTrace();
            }
        }
        
       addNetworkErrorListener(err -> {
            // prevent the event from propagating
            /*
            err.consume();
            if(err.getError() != null) {
                Log.e(err.getError());
            }
            */
        });   
        
        theme = UIManager.initFirstTheme("/theme");
        
        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);
        InfiniteProgress.setDefaultMaterialDesignMode(true);
        
        setupDatabase();
        //startWebSocket();
    }
    
    
    public void PushMessage(String message)
    {
        if(Display.getInstance().isMinimized())
        {
            pushCount++;
            push.setAlertBody(message);
            Display.getInstance().scheduleLocalNotification(push, 10, LocalNotification.REPEAT_NONE);
            Display.getInstance().vibrate(200);
        }
        else
        {
            ToastBar t = ToastBar.getInstance();
            t.setPosition(Component.TOP);
            t.showMessage(message, FontImage.MATERIAL_INFO);
        }
    }
    
    
    WebSocket socket;
    public void startWebSocket()
    {
        socket = new WebSocket(SOCKET_URL) {

            @Override
            protected void onOpen() {
                System.out.println("In onOpen");
                socket.send("latest##"+Storage.getInstance().readObject("cor"));
            }

            @Override
            protected void onClose(int statusCode, String reason) {
                System.out.println(reason);
            }

            @Override
            protected void onMessage(final String message) {
                System.out.println("Received message "+message);
                Display.getInstance().callSerially(new Runnable() {
                    public void run() {
                        try
                        {
                        List r = StringUtil.tokenize(message, "##");
                        Map map = new JSONParser()
                        .parseJSON(new InputStreamReader(new ByteArrayInputStream(r.get(1).toString().getBytes())));
                        ArrayList data = (ArrayList) map.get("root");
                        
                        if(message.startsWith("welcomeBro"))
                        {
                            //send("AllData##"+Storage.getInstance().readObject("cor"));
                        }
                        
                        if(message.startsWith("broadcast"))
                        {
                            if(r.get(1).equals("thumb"))
                            {
                                String code = r.get(2).toString();
                                String value = r.get(3).toString();
                                ArrayList newOne = new ArrayList();
                                ArrayList oldOne = (ArrayList) Storage.getInstance().readObject("AllData");
                                for(Object t: oldOne)
                                {
                                    Map p = (Map) t;
                                    if(code.equals(p.get("code").toString()))
                                    {
                                        p.remove("thumb");
                                        p.put("thumb", value);
                                    }
                                    newOne.add(p);
                                }
                                Storage.getInstance().writeObject("AllData", newOne);
                                if(Storage.getInstance().exists("SentData"))
                                {
                                    ArrayList sent = (ArrayList) Storage.getInstance().readObject("SentData");
                                    {
                                        for(Object t: sent)
                                        {
                                            Map m = (Map) t;
                                            if(m.get("code").toString().equals(code))
                                            {
                                                PushMessage("Someone just gave your case ("+m.get("category")+") a thumb up...!");
                                            }
                                        }
                                    }
                                }
                            }
                            if(r.get(1).equals("newCase"))
                            {
                                String newCase = r.get(2).toString();
                                Map m = new JSONParser().parseJSON(new InputStreamReader(new ByteArrayInputStream(newCase.getBytes())));
                                ArrayList oldOne = (ArrayList) Storage.getInstance().readObject("AllData");
                                List k = StringUtil.tokenize(m.get("id").toString(), '.');
                                Storage.getInstance().writeObject("cor", k.get(0));
                                oldOne.add(0, m);
                                Storage.getInstance().writeObject("AllData", oldOne);
                                PushMessage("A new case has just been reported ("+m.get("category")+")");
                            }
                        }
                      
                        if(message.startsWith("AllData"))
                        {
                            Storage.getInstance().writeObject("AllData", data);
                            System.out.println("i wrote all data");
                        }
                        if(message.startsWith("comments"))
                        {
                            fetchCommentsForCase(data);
                        }
                        if(message.startsWith("newComment"))
                        {
                            addComment(r.get(1).toString());
                        }
                        if(message.startsWith("search"))
                        {
                            doSearchResults(data);
                        }
                        
                        if(message.startsWith("latest"))
                        {
                            String newCase = r.get(1).toString();
                            Map m = new JSONParser().parseJSON(new InputStreamReader(new ByteArrayInputStream(newCase.getBytes())));
                            Set o = m.keySet();
                            for(Object g: o)
                            {
                                System.out.println("this is key "+g);
                            }
                            ArrayList newOne = null;
                            ArrayList oldOne = (ArrayList) Storage.getInstance().readObject("AllData");
                            if(o.contains("root"))
                            {
                                newOne = (ArrayList) m.get("root");
                                for(Object n: newOne)
                                {
                                    Map l = (Map) n;
                                    List k = StringUtil.tokenize(l.get("id").toString(), '.');
                                    Storage.getInstance().writeObject("cor", k.get(0));
                                    oldOne.add(0,l);
                                }
                                Storage.getInstance().writeObject("AllData", oldOne);
                                PushMessage(newOne.size()+" new cases have been reported.");
                                addMarkers(mc, home);
                                mc.repaint();
                            }
                            else
                            {
                                List k = StringUtil.tokenize(m.get("id").toString(), '.');
                                Storage.getInstance().writeObject("cor", k.get(0));
                                oldOne.add(0, m);
                                Storage.getInstance().writeObject("AllData", oldOne);
                                PushMessage("A new case has been reported.");
                                addMarkers(mc, home);
                                mc.repaint();
                            }
                        }
                        if(message.startsWith("received"))
                        {
                            String msg = r.get(1).toString();
                            Map m = new JSONParser().parseJSON(new InputStreamReader(new ByteArrayInputStream(msg.getBytes())));
                            ArrayList snt = (ArrayList) Storage.getInstance().readObject("SentData");
                            if(Storage.getInstance().exists("Inbox"))
                            {
                                ArrayList lx = (ArrayList) Storage.getInstance().readObject("Inbox");
                                boolean exists = false;
                                for(Object t: lx)
                                {
                                    Map a = (Map) t;
                                    if(m.get("code").equals(a.get("code")))
                                    {
                                        exists = true;
                                    }
                                }
                                if(exists == false)
                                {
                                    Map e = new HashMap();
                                    e.put("code", m.get("code"));
                                    for(Object q: snt)
                                    {
                                        Map l = (Map) q;
                                        if(l.get("code").equals(m.get("code")))
                                        {
                                            e.put("category", l.get("category"));
                                        }
                                    }
                                    lx.add(0, e);
                                    Storage.getInstance().writeObject("Inbox", lx);
                                    Map b = (Map) Storage.getInstance().readObject("Messages");
                                    Set d = b.keySet();
                                    if(d.contains(m.get("code")))
                                    {
                                        ArrayList g = (ArrayList) b.get("code");
                                        g.add(m);
                                        b.remove(m.get("code"));
                                        b.put(m.get("code"), g);
                                        Storage.getInstance().writeObject("Messages", b);
                                    }
                                }
                            }
                            else
                            {
                                ArrayList inbox = new ArrayList();
                                Map p = new HashMap();
                                p.put("code", m.get("code"));
                                for(Object q: snt)
                                {
                                    Map l = (Map) q;
                                    if(l.get("code").equals(m.get("code")))
                                    {
                                        p.put("category", l.get("category"));
                                    }
                                }
                                inbox.add(p);
                                Storage.getInstance().writeObject("Inbox", inbox);
                                Map q = new HashMap();
                                ArrayList v = new ArrayList();
                                v.add(q);q.put(m.get("code"), v);
                                Storage.getInstance().writeObject("Messages", q);
                                
                            }
                        }
                        
                        
                        
                        }catch(Exception et)
                        {
                            et.printStackTrace();
                            ToastBar t = ToastBar.getInstance();
                            t.setPosition(Component.TOP);
                            t.showMessage("Something strange just happened... :("+et.getMessage(), FontImage.MATERIAL_DELETE);
                        }
                        
                    }
                    

                });
            }

            @Override
            protected void onError(Exception ex) {
                System.out.println("in onError "+socket.getReadyState());
                ex.printStackTrace();
                socket.autoReconnect(3000);
            }

             @Override
             protected void onMessage(byte[] message) {

             }
        };
        System.out.println("Sending connect");
        socket.connect();
        
        
    }
    
    public void setupDatabase()
    {
        caseLocation = "";
        String path = Display.getInstance().getDatabasePath("creporter.db");
        if(path != null && !FileSystemStorage.getInstance().exists(path)) {
            copyDb(path);
        }
    }
    
    String reason = "";
    public ArrayList queryRunner(String query)
    {
        ArrayList lx = new ArrayList();
        Database db = null;
        Cursor cursor = null;
        try
        {
            db = Display.getInstance().openOrCreate("creporter.db");
            if(query.startsWith("select"))
            {
                cursor = db.executeQuery(query);
                int columns = cursor.getColumnCount();
                if(columns > 0)
                {
                    boolean next = cursor.next();
                    if(next)
                    {
                        while(next)
                        {
                            Row currentRow = cursor.getRow();
                            Map map = new HashMap();
                            for(int c=0; c< columns; c++)
                            {
                                map.put(cursor.getColumnName(c), currentRow.getString(c));
                            }
                            lx.add(map);
                            next = cursor.next();
                        }
                    }
                }
                cursor.close();
                db.close();
            }
            else 
            {
                db.execute(query);
                db.close();
                lx.add("done");
            }
           
            
        }
        catch(Exception er)
        {
            //logs.setText(logs.getText()+"\n\n"+er.getMessage());
            lx.add("error "+er.getMessage());
            er.printStackTrace();
        }
        return lx;
    }
    
    private void copyDb(String path) {  
        try(InputStream i = Display.getInstance().getResourceAsStream(getClass(), "/creporter.db");
                OutputStream o = FileSystemStorage.getInstance().openOutputStream(path)) {
            Util.copy(i, o);
        } catch(IOException err) {
            //logs.setText(logs.getText()+"\n\n"+err.getMessage());
            Log.e(err);
        }
    }

    public void start() {
        
        if (current != null) {
            current.show();
            return;
        }
        
        /*
        List lx = queryRunner("select * from table1");
        for(Object b: lx)
        {
            Map m = (Map) b;
            System.out.println(m.get("code")+" "+m.get("time")+" "+m.get("isDraft"));
        } */
                
        push  = new LocalNotification();
        push.setId("cnreporter-push");
        push.setAlertTitle("LAGReporter");
        buildSplash();
        
    }
    
    
    public void buildSideMenu()
    {
        Container cn = new Container(new BorderLayout());
            Container c1 = new Container(BoxLayout.y());
            c1.addComponent(new Label(" "));
            c1.addComponent(new Label(" "));
            c1.setUIID("SideBan");
            
            cn.addComponent("North", c1);
            
            Container b = new Container(BoxLayout.y());
                Container g1 = new Container(new GridLayout(1,2));
                    Button p1 = new Button("Profile");
                    p1.setUIID("ProfileButton");
                    p1.setTextPosition(2);
                    FontImage.setMaterialIcon(p1, FontImage.MATERIAL_ACCOUNT_BOX,6);
                    g1.addComponent(p1);
                    p1.addActionListener(e -> {
                        home.getToolbar().closeSideMenu();
                        welcomeDetails("home");
                        
                    });
                    
                    Button p2 = new Button("Inbox");
                    p2.setUIID("Inbox");
                    p2.setTextPosition(2);
                    FontImage.setMaterialIcon(p2, FontImage.MATERIAL_INBOX);
                    g1.addComponent(p2);
                    b.addComponent(g1);
                     p2.addActionListener(e -> {
                         home.getToolbar().closeSideMenu();
                        OpenInbox();
                        
                    });
                    
                    Container x = new Container();
                    x.setUIID("TitleArea");
                    x.addComponent(new Label(" "));
                    b.addComponent(x);
                    
            cn.addComponent("Center",b);
            home.getToolbar().addComponentToSideMenu(cn);
            home.getToolbar().addMaterialCommandToSideMenu("Settings", FontImage.MATERIAL_SETTINGS, e -> {
            
            Form f = new Form("Settings");
            
            
            });
            home.getToolbar().addMaterialCommandToSideMenu("Useful Emergency Info", FontImage.MATERIAL_CONTACT_PHONE, e -> {});
            home.getToolbar().addMaterialCommandToSideMenu("Contact Us", FontImage.MATERIAL_CONTACT_MAIL, e -> {});
    }
    MapContainer mc = null;
    TextField o;
    Container draftContainer, sentContainer, allContainer;
    
    
    
    
    public void makeMain()
    {
        System.out.println("start...");
        home = new Form("COVID-TRACK");
        home.setLayout(new BorderLayout());
        //home.addComponent("South", new Label(Storage.getInstance().readObject("LOCATION").toString()));
        
        Container v = new Container(new BorderLayout());
        
        Container c = new Container(BoxLayout.y());
        c.setUIID("CNT1");
        MultiButton b1 = new MultiButton("");
        b1.setTextLine2("Make New Report");
        b1.setTextLine3("Report bad roads, drainage issues, etc");
        Image emblem = FontImage.createMaterial(FontImage.MATERIAL_NAVIGATE_NEXT, UIManager.getInstance().getComponentStyle("MultiLine2"),4);
        b1.setEmblem(emblem);
        //b1.setIconUIID("MIcon");
        FontImage.setMaterialIcon(b1, FontImage.MATERIAL_DIRECTIONS_WALK, 4);
        c.addComponent(b1);
        
        b1.addLongPressListener(l -> {
            Form f = new Form("Admin Mesenger");
            
        });
        
        b1.addActionListener(e -> {
            allContainer = null;
            sentContainer = null;
            draftContainer = null;
            Form cor = new Form("Reports");
            cor.getToolbar().setBackCommand("", ee -> home.showBack());
            cor.setLayout(new BorderLayout());
            
            draftContainer = new Container();
            sentContainer = new Container();
            allContainer = new Container();
        
            Tabs tab = new Tabs(Component.TOP);
            
            draftContainer.setLayout(BoxLayout.y());
            draftContainer.setScrollableY(true);
            
            sentContainer.setLayout(BoxLayout.y());
            sentContainer.setScrollableY(true);
            
            allContainer.setLayout(BoxLayout.y());
            allContainer.setScrollableY(true);
            
            List py = StringUtil.tokenize(Storage.getInstance().readObject("cor").toString(),".");
            int lx = Integer.parseInt(py.get(0).toString());
            
            allContainer.addPullToRefresh(new Runnable()
            {
                public void run()
                {
                    parseData("all", cor, tab);
                }
            });
            
            
            sentContainer.setLayout(new BorderLayout());
            Button loadAll1 = new Button("Tap to Load");
            ArrayList lx1 = new ArrayList();
            Container call1 = new Container(new FlowLayout(Component.CENTER));
            try{lx1 = (ArrayList) Storage.getInstance().readObject("SentData");}
            catch(Exception er){}
            
            sentContainer.addPullToRefresh(new Runnable()
            {
                public void run()
                {
                    //parseData("sent", cor, tab);
                }
            });
            
            tab.addTab("All Cases", allContainer);
            tab.addTab("Sent (0)", sentContainer);
            tab.addTab("Drafts (0)", draftContainer);
            
            if(Storage.getInstance().exists("AllData"))
            {
                parseData("all", cor, tab);
            }
            else
            {
                socket.send("AllData##"+lx);
            }
            
            if(Storage.getInstance().exists("SentData"))
            {
                parseData("sent", cor, tab);
            }
            else
            {
                //socket.send("AllData##"+lx);
            }
            
            
            cor.addComponent("Center", tab);
            loadDrafts(cor, tab);
            
            Button ad = new Button("Submit Case");
            FontImage.setMaterialIcon(ad, FontImage.MATERIAL_ADD, 5);
            ad.addActionListener(ev -> {
            
                makeCase(false, "", cor, tab);
            
            });
            cor.addComponent("South", ad);
            cor.show();
        });
                
       
        v.addComponent("North", c);
        
        String lat="0.0", lon="0.0";
        
            String g = "";
            try{
            g = Storage.getInstance().readObject("LOCATION").toString();}
            catch(Exception er)
            {
                lat = "0";
                lon = "0";
                er.printStackTrace();
                //this.sendErrorReport();
            }
            if(g != null)
            {
                List y = StringUtil.tokenize(g, ",");
                lat = y.get(0).toString();
                lon = y.get(1).toString();
            }
            else
            {
                lat = "0";
                lon = "0";
            }
        
        Coord location = new Coord(Double.parseDouble(lat), Double.parseDouble(lon));
        mc = new MapContainer(JS_API_KEY);
        //mc.zoom(location, 15);
        mc.setShowMyLocation(true);
        //mc.setCameraPosition(mc.getCameraPosition());
        //mc.setMapType(MapContainer.MAP_TYPE_HYBRID);
        //mc.setCameraPosition(location);
        
        v.addComponent("Center", mc);
        addMarkers(mc, home);
        
        Command gridCommand = home.getToolbar().addMaterialCommandToRightBar("", FontImage.MATERIAL_SEARCH, 4, e -> {
            
            searchForm();
        });
        
        o = new TextField();
       
        
        home.addComponent("Center", v);
        buildSideMenu();
        home.show();
       //loadStoredCases();
    }
    Container searchResults;
    Form search;
    public void searchForm()
    {
        search = new Form("Search");
        search.getToolbar().setBackCommand("", ee -> home.showBack());
        search.setLayout(new BorderLayout());
        Container north = new Container(BoxLayout.y());
        TextField text = new TextField();
        text.setUIID("TextAreaRed");
        north.addComponent(text);
        Button s = new Button();
        s.addActionListener(e -> {
            if(text.getText().length() < 1)
            {
                return;
            }
            searchResults.removeAll();
            Container c = new Container(new FlowLayout(Component.CENTER));
            c.addComponent(new InfiniteProgress());
            socket.send("search##"+text.getText());
        });
        FontImage.setMaterialIcon(s, FontImage.MATERIAL_SEARCH);
        north.addComponent(s);
        search.addComponent("North", north);
        searchResults = new Container(BoxLayout.y());
        searchResults.setUIID("MSG");
        searchResults.setScrollableY(true);
        search.addComponent("Center", searchResults);
        search.show();
    }
    
    public void doSearchResults(ArrayList result)
    {
        if(result.size() == 0)
        {
            return;
        }
        for(Object p: result)
        {
            Map map = (Map) p;
            Container c = new Container(BoxLayout.y());
            c.setUIID("Result");
            c.addComponent(new Label(map.get("category").toString(), "MultiLine1"));
            c.addComponent(new Label(map.get("createdAt").toString(), "MultiLine3"));
            c.addComponent(new Label(map.get("code").toString(), "MultiLine3"));
            String details = map.get("details").toString();
            c.addComponent(new Label(details, "RedLabel"));
            Container media = new Container(new FlowLayout(Component.LEFT));
            if(map.get("photo").equals("true"))
            {
                Label pa = new Label("");
                pa.setUIID("MultiLine2");
                FontImage.setMaterialIcon(pa, FontImage.MATERIAL_PHOTO);
                media.addComponent(pa);
            }
            if(map.get("audio").equals("true"))
            {
                Label pa = new Label("");
                pa.setUIID("MultiLine2");
                FontImage.setMaterialIcon(pa, FontImage.MATERIAL_MIC);
                media.addComponent(pa);
            }
            if(map.get("video").equals("true"))
            {
                Label pa = new Label("");
                pa.setUIID("MultiLine2");
                FontImage.setMaterialIcon(pa, FontImage.MATERIAL_VIDEOCAM);
                media.addComponent(pa);
            }
            c.addComponent(media);
            Button b = new Button();
            b.addActionListener(e ->{
            ViewCaseForm(map, search);
            });
            c.setLeadComponent(b);
            searchResults.addComponent(c);
        }
        searchResults.revalidate();
    }
    
    public String shortenTo15(String input)
    {
        String firstFourChars = "";
        if (input.length() > 15)
        {
            firstFourChars = input.substring(0, 15);
        }
        else
        {
            firstFourChars = input;
        }
        return firstFourChars;
    }
    
    
    public void loadStoredCases(Form cor, Tabs tab)
    {
         if(allContainer != null && Storage.getInstance().exists("AllData"))
        {
            parseData("all", cor, tab);
        }
    }
    
    
    public void sendErrorReport()
    {
        String logs = NativeLogs.getNativeLogs();
            Display.getInstance().sendMessage(crash, "Crash", new Message(logs));
    }
    
    
   public void addMarkers(MapContainer mc, Form cor)
   {
       
       if(Storage.getInstance().exists("AllData"))
       {
       ArrayList lx = (ArrayList) Storage.getInstance().readObject("AllData");
       String allData = "";
       int x = 0;
       try
       {
       if(lx !=null && lx.size() < 1)
       {
           System.out.println("its less than 1");
           mc.zoom(mc.getCameraPosition(), 16);
           return;
       }
       }catch(Exception er){
           
       }
       Vector v=  new Vector();
       try
       {
           
        Style s = new Style();
        s.setFgColor(0xff0000);
        s.setBgTransparency(0);
        FontImage markerImg = FontImage.createMaterial(FontImage.MATERIAL_PLACE, s, 5);
        EncodedImage ei = EncodedImage.createFromImage(markerImg, false);
        Coord c = null;
        try{mc.clearMapLayers();}catch(Exception er){}
       for(Object m: lx)
       {
           Map p= (Map) m;
           String u = p.get("caseLocation").toString();
           System.out.println("this is u "+u);
           if(u != null && u.length() > 7)
           {
               System.out.println("this u made it "+u);
           List k = StringUtil.tokenize(u, ",");
           c = new Coord(Double.parseDouble(k.get(0).toString()), Double.parseDouble(k.get(1).toString()));
           v.add(c);
           mc.addMarker(ei, c, "Category", p.get("category").toString(), new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                    ToastBar t = ToastBar.getInstance();
                    t.setPosition(Component.TOP);
                    t.showMessage(p.get("category").toString()+"\n"+ p.get("address")+"\n"+p.get("createdAt"), FontImage.MATERIAL_PLACE, 4000, e -> {
                        ViewCaseForm(p , cor);
                    });
                }
            });
           }
           home.revalidate();
       }
       
       mc.fitBounds(BoundingBox.create(v));
       mc.zoom(mc.getCameraPosition(), 8);
       mc.revalidate();

       }catch(Exception er){er.printStackTrace();} 
       
       }
       else
       {
            mc.zoom(mc.getCameraPosition(), 16);
       }
   }
    
    
    
    public void loadAll(Form form, boolean isNew, Tabs tab) {
        
        if(isNew = true)
        {
            System.out.println("its new");
            allContainer.removeAll();
            allContainer.setLayout(new FlowLayout(Component.CENTER));
            allContainer.addComponent(new InfiniteProgress());
            allContainer.revalidate();
        }
        try {
                ArrayList results = (ArrayList) Storage.getInstance().readObject("AllData");
                Storage.getInstance().writeObject("AllData", results);
                parseData("all", form, tab);
        } catch (Exception e) {
            
        }
    }
    
    
    
    
    
    
    public Container getListingComponent(Map m, Form cor)
    {
        Container c = new Container(BoxLayout.y());
        
        c.setUIID("Listing");
        Container a = new Container(new GridLayout(1,2));
        
        Container cat = new Container(new FlowLayout(Component.LEFT));
        Label category = new Label(m.get("category").toString());
        category.setUIID("SentCategory");
        cat.addComponent(category);
        a.addComponent(cat);        
        
        Container open = new Container(new FlowLayout(Component.RIGHT));
        Label k = new Label();
        k.setUIID("MultiLine2");
        FontImage.setMaterialIcon(k, FontImage.MATERIAL_ARROW_FORWARD);
        open.addComponent(k);
        a.addComponent(open);
        
        c.addComponent(a);
        
        Label address = new Label(m.get("address").toString());
        FontImage.setMaterialIcon(address, FontImage.MATERIAL_PLACE);
        address.setUIID("MultiLine3");
        c.addComponent(address);
        
        Label caseNumber = new Label("No. "+m.get("code").toString());
        caseNumber.setUIID("MultiLine3");
        FontImage.setMaterialIcon(caseNumber, FontImage.MATERIAL_BOOK);
        c.addComponent(caseNumber);
        
        Label details = new Label("Details: "+m.get("details").toString());
        details.setUIID("SentDetails");
        //c.addComponent(details);
        
        Container end = new Container(new GridLayout(1,2));
        //end.setUIID("SentEnd");
        Container date = new Container(new FlowLayout(Component.LEFT));
        Label d = new Label(m.get("createdAt").toString());
        d.setUIID("SentDate");
        date.addComponent(d);
        end.addComponent(date);
        
        Container media = new Container(new FlowLayout(Component.RIGHT));
        if(m.get("photo").equals("true"))
        {
            Label p = new Label("");
            p.setUIID("MultiLine2");
            FontImage.setMaterialIcon(p, FontImage.MATERIAL_PHOTO);
            media.addComponent(p);
        }
        if(m.get("audio").equals("true"))
        {
            Label p = new Label("");
            p.setUIID("MultiLine2");
            FontImage.setMaterialIcon(p, FontImage.MATERIAL_MIC);
            media.addComponent(p);
        }
        if(m.get("video").equals("true"))
        {
            Label p = new Label("");
            p.setUIID("MultiLine2");
            FontImage.setMaterialIcon(p, FontImage.MATERIAL_VIDEOCAM);
            media.addComponent(p);
        }
        end.addComponent(media);
        c.addComponent(end);
        
        Button click = new Button();
        click.addActionListener(r -> {
        
            ViewCaseForm(m, cor);
            
        });
        c.setLeadComponent(click);
        
        return c;
    }
    
    public void ViewCaseForm(Map m, Form cor)
    {
        Form f = new Form("View Case");
            f.getToolbar().setBackCommand("", ee -> cor.showBack());
            f.setLayout(new BorderLayout());
            final String user = getUser();
            Tabs tab = new Tabs();
            
            final Container s = new Container(BoxLayout.y());
            s.setScrollableY(true);
            
            final Container c1 = new Container(new GridLayout(1,2));
            Container tp = new Container(new FlowLayout(Component.LEFT));
            Label dt = new Label(m.get("createdAt").toString());
            dt.setUIID("MultiLine3");
            tp.addComponent(dt);
            c1.addComponent(tp);
            Container tm = new Container(new FlowLayout(Component.RIGHT));
            List yy = StringUtil.tokenize(""+m.get("thumb"), ".");
            Label mt = new Label("("+yy.get(0)+")");
            mt.setUIID("RedLabel");
            FontImage.setMaterialIcon(mt, FontImage.MATERIAL_THUMB_UP);
            Button h = new Button();
            h.addActionListener(y -> {
                socket.send("thumb##"+m.get("code").toString());
                for(int x=0; x<tm.getComponentCount(); x++)
                {
                    Component v = tm.getComponentAt(x);
                    if(v instanceof Label)
                    {
                        Label label = (Label) v;
                        List q = StringUtil.tokenize(""+m.get("thumb"), ".");
                        int a = Integer.parseInt(q.get(0).toString()) +1;
                        label.setText("("+a+")");
                        label.repaint();
                    }
                    
                }
            });
            tm.setLeadComponent(h);
            tm.addComponent(mt);
            c1.addComponent(tm);
            s.addComponent(c1);
            
            s.addComponent(new Label("Category","SentCategory"));
            s.addComponent(new Label(m.get("category").toString(),"RedLabel"));
            
            s.addComponent(new Label("Address","SentCategory"));
            SpanLabel dll = new SpanLabel(m.get("address").toString());
            dll.setTextUIID("RedLabel");
            s.addComponent(dll);
            
            s.addComponent(new Label("Case Number","SentCategory"));
            s.addComponent(new Label(m.get("code").toString(),"RedLabel"));
            
            s.addComponent(new Label("Narrative","SentCategory"));
            SpanLabel dl = new SpanLabel(m.get("details").toString());
            dl.setTextUIID("RedLabel");
            s.addComponent(dl);
            
            tab.addTab("", FontImage.MATERIAL_DETAILS, 4, s);
            
            Container com = new Container(new BorderLayout());
            com.setScrollableY(false);
            
            mg = new Container(BoxLayout.y());
            Button tap = new Button("Load Comments");
            tap.addActionListener(b -> {
                mg.removeAll();
                mg.addComponent(new InfiniteProgress());
                mg.revalidate();
                socket.send("getcomment##"+m.get("code").toString());
                //fetchCommentsForCase(m.get("code").toString(), mg);
            });
            mg.addComponent(tap);
            mg.setScrollableY(true);
            com.addComponent("Center", mg);
            
            Container bt =new Container(BoxLayout.y());
            bt.setUIID("CNT1");
            TextArea ch = new TextArea();
            ch.setUIID("TextAreaRed");
            ch.setRows(3);
            ch.setMaxSize(3000);
            bt.addComponent(ch);
            Button sd = new Button("Send");
            bt.addComponent(sd);
            com.addComponent("South", bt);
            
            sd.addActionListener(r -> {
            
            if(ch.getText().length() < 1)
            {
                ToastBar.showMessage("Enter comments first...", FontImage.MATERIAL_COMMENT);
                return;
            }
            
            socket.send("newComment##"+user+"@#"+m.get("code")+"@#"+ch.getText());            
            ch.setText("");

            });
            
            tab.addTab("", FontImage.MATERIAL_COMMENT, 4, com);
            
            
            f.addComponent("Center", tab);
            
            Container z = new Container (new FlowLayout(Component.CENTER));
            if(m.get("photo").equals("true"))
            {
                Button p1 = new Button("View Photo");
                p1.setTextPosition(Label.BOTTOM);
                FontImage.setMaterialIcon(p1, FontImage.MATERIAL_PHOTO);
                p1.addActionListener(ra -> {
                    viewMedia("photo", m.get("code").toString(), f, false);
                });
                z.addComponent(p1);
            }
            if(m.get("audio").equals("true"))
            {
                Button p1 = new Button("Play Audio");
                p1.setTextPosition(Label.BOTTOM);
                FontImage.setMaterialIcon(p1, FontImage.MATERIAL_MIC);
                p1.addActionListener(ra -> {
                    viewMedia("audio", m.get("code").toString(), f, false);
                });
                z.addComponent(p1);
            }
            if(m.get("video").equals("true"))
            {
                Button p1 = new Button("Watch Video");
                p1.setTextPosition(Label.BOTTOM);
                FontImage.setMaterialIcon(p1, FontImage.MATERIAL_VIDEOCAM);
                p1.addActionListener(ra -> {
                    viewMedia("video", m.get("code").toString(), f, false);
                });
                z.addComponent(p1);
            }
            
            f.addComponent("South", z);
            
            
            
            
            f.show();
            
             
    }
    
    public void OpenInbox()
    {
        Form cor = new Form("Inbox");
        cor.getToolbar().setBackCommand("", ee -> home.showBack());
        cor.setLayout(new BorderLayout());
        cor.setScrollableY(false);
        Container c = new Container(BoxLayout.y());
        c.setUIID("MSG");
        c.setScrollableY(true);
        if(Storage.getInstance().exists("Inbox"))
        {
            ArrayList lx = (ArrayList) Storage.getInstance().readObject("Inbox");
            for(Object x: lx)
            {
                Map map = (Map) x;
                MultiButton m = new MultiButton("");
                m.setTextLine1(map.get("category").toString());
                Map message = null;
                ArrayList ms = (ArrayList) Storage.getInstance().readObject("Messages");
                for(Object t: ms)
                {
                    message = (Map) t;
                }
                m.setTextLine3(message.get("Message").toString());
                m.setTextLine4("Last Message Received: "+message.get("sentDate"));
                c.addComponent(m);
            }
        }
        cor.addComponent("Center", c);
        cor.show();
        
        
    }
    
    public void addComment(String newcomment)
    {
        Container comment = new Container(BoxLayout.y());
        comment.setUIID("Comments");
        comment.addComponent(new Label(new Date().toString(),"MultiLine3"));
        comment.addComponent(new Label("Anonymous","MultiLine4"));
        SpanLabel text = new SpanLabel(newcomment);
        text.setTextUIID("RedLabel");
        comment.addComponent(text);
        mg.addComponent(comment);
        mg.animateLayoutAndWait(100);
        mg.scrollComponentToVisible(comment);
    }
    
    public void fetchCommentsForCase(ArrayList results)
    {
            try
            {
                layoutComments(results, mg);
            }
            catch(Exception er)
            {
                er.printStackTrace();
            }
    }
    
    public void layoutComments(ArrayList comments, Container msg)
    {
        msg.removeAll();
        msg.revalidate();
        msg.setLayout(BoxLayout.y());
        for(Object t: comments)
        {
            Map map = (Map) t;
        }
        msg.setUIID("MSG");
        msg.setLayout(BoxLayout.y());
        for(Object x: comments)
        {
            Map map = (Map) x;
            Container comment = new Container(BoxLayout.y());
            comment.setUIID("Comments");
            comment.addComponent(new Label(map.get("createdAt").toString(),"MultiLine3"));
            comment.addComponent(new Label("Anonymous","MultiLine4"));
            SpanLabel text = new SpanLabel(map.get("comment").toString());
            text.setTextUIID("RedLabel");
            comment.addComponent(text);
            msg.addComponent(comment);
            msg.animateLayoutAndWait(20);
            msg.scrollComponentToVisible(comment);
            
        }
    }
    
    public String getUser()
    {
        if(Storage.getInstance().exists("phone"))
        {
            return Storage.getInstance().readObject("phone").toString();
        }
        
        if(Storage.getInstance().exists("email"))
        {
            return Storage.getInstance().readObject("email").toString();
        }
        return "anonymous";
    }
    
    
    public String buildParams(String path, Map params)
    {
        String res = URL+path+"?k=0";
        Set t = params.keySet();
        for(Object x: t)
        {
            res = res + "&"+x+"="+params.get(x);
        }
        return res;
    }
    
    
    Container mg;
    public void loadSent()
    {
        
    }
    
    public void parseData(String source, Form cor, Tabs tab)
    {
        ArrayList results = null;
        
        if(source.equals("sent"))
        {
            System.out.println("i'm parsing sent");
            results = (ArrayList) Storage.getInstance().readObject("SentData");
        if (results != null && results.size() > 0)
                {
                    sentContainer.removeAll();
                    sentContainer.setLayout(BoxLayout.y());
                    sentContainer.setScrollableY(true);
                    for(Object mm: results)
                    {
                        Map m = (Map) mm;
                        MultiButton mb = new MultiButton("");
                //mb.setUIID("DraftCor");
                long ln = Long.parseLong(m.get("code").toString());
                Date g = new Date(ln);
                SimpleDateFormat df2 = new SimpleDateFormat("dd/MM/yy hh:mm");
                        String dateText = df2.format(g);
        mb.setTextLine1(m.get("category").toString());
                mb.setTextLine2(g.toString());
                mb.setTextLine3("Case Number: "+m.get("code").toString());
                Image emblem = FontImage.createMaterial(FontImage.MATERIAL_NAVIGATE_NEXT, UIManager.getInstance().getComponentStyle("MultiLine2"),4);
                mb.setEmblem(emblem);
                mb.addActionListener(t -> {
                ViewCaseForm(m, cor);
                });
                sentContainer.addComponent(mb);
                    }
                   
                    tab.setTabTitle("Sent ("+results.size()+")", null, 1);
                }         sentContainer.revalidate();
        }
        if(source.equals("all"))
        {
            try
            {
            results = (ArrayList) Storage.getInstance().readObject("AllData");
            if (results.size() > 0)
                {
                    System.out.println("i'm parsing all");
                    allContainer.removeAll();
                    tab.setTabTitle("All Cases ("+results.size()+")", null, 0);
                    //allContainer.setLayout(BoxLayout.y());
                    //allContainer.setScrollableY(true);
                    for(Object m: results)
                    {
                        Map n = (Map) m;
                        Container comp = getListingComponent(n, cor);
                        allContainer.addComponent(comp);
                    }
                    
                    allContainer.repaint();
                    cor.revalidate();
                }
            }
            catch(Exception er)
            {
                
            }
        }
    }
    
    
    
    
    public void loadDrafts(Form cor, Tabs tab)
    {
        try
        {
            draftContainer.removeAll();
            //sentContainer.removeAll();
            List lx = queryRunner("select * from table1 where isDraft = 'true' and rtype = 'cor' order by (rtime) ");
            for(Object b: lx)
            {
                Map m = (Map) b;
                MultiButton mb = new MultiButton("");
                //mb.setUIID("DraftCor");
                long ln = Long.parseLong(m.get("code").toString());
                mb.setTextLine1(m.get("category").toString());
                Date g = new Date(ln);
                SimpleDateFormat df2 = new SimpleDateFormat("dd/MM/yy hh:mm");
                String dateText = df2.format(g);
                mb.setTextLine2(g.toString());
                Image emblem = FontImage.createMaterial(FontImage.MATERIAL_NAVIGATE_NEXT, UIManager.getInstance().getComponentStyle("MultiLine2"),4);
                mb.setEmblem(emblem);
                mb.addActionListener(t -> {
                makeCase(true, m.get("code").toString(), cor, tab);
                });
                draftContainer.addComponent(mb);
            }
            tab.setTabTitle("Drafts ("+lx.size()+")", null, 2);
        }
        catch(Exception er)
        {
            //logs.setText(logs.getText()+"\n\n"+NativeLogs.getNativeLogs());
        }
        
    }
    
    public void geoCodeTest()
    {
        Form hi = new Form("Maps Geocode Test");
        hi.setLayout(new BoxLayout(BoxLayout.Y_AXIS));
        TextField textField = new TextField("");
        textField.setHint("Address/Coord");
        hi.add(textField);

        Button address = new Button("Get Address");
        address.addActionListener(evt -> {
            String text = textField.getText();
            List lx = StringUtil.tokenize(textField.getText(), ",");
            String formattedAddress = getFormattedAddress(new Coord(Double.parseDouble(lx.get(0)+""), Double.parseDouble(lx.get(1)+"")));
            ToastBar.showErrorMessage(formattedAddress);System.out.println(formattedAddress);
        });
        hi.add(address);

        Button coord = new Button("Get Coord");
        coord.addActionListener(evt -> {
            Coord coords = getCoords(textField.getText());
            System.out.println(coords.toString());
            ToastBar.showErrorMessage(coords.toString());
        });

        hi.add(coord);
        hi.show();
    }
    
    public static String getFormattedAddress(Coord coord) {
        String ret = "error";
        try {
            ConnectionRequest request = new ConnectionRequest("https://maps.googleapis.com/maps/api/geocode/json", false);
            request.addArgument("key", "AIzaSyCC9HSProR_c3ETwPjN0LQpr3UScor8NCE");
            request.addArgument("latlng", coord.getLatitude() + "," + coord.getLongitude());
            NetworkManager.getInstance().addErrorListener((e) -> e.consume());
            NetworkManager.getInstance().addToQueueAndWait(request);
            if(request.getResponseData() == null)
            {
                return "error";
            }
             Map<String, Object> response = new JSONParser().parseJSON(new InputStreamReader(new ByteArrayInputStream(request.getResponseData()), "UTF-8"));
            if (response.get("results") != null) {
                ArrayList results = (ArrayList) response.get("results");
                if (results.size() > 0)
                    ret = (String) ((LinkedHashMap) results.get(0)).get("formatted_address");
            }
        } catch (Exception e) {
            e.printStackTrace();
            ret = "error";
        }
        return ret;
    }

    public static void getFormattedAddressAsync(Coord coord, Callback callback) {
        ConnectionRequest request = new ConnectionRequest("https://maps.googleapis.com/maps/api/geocode/json", false) {
            @Override
            protected void readResponse(InputStream input) throws IOException {
                String ret = "";
                Map<String, Object> response = new JSONParser().parseJSON(new InputStreamReader(input, "UTF-8"));
                if (response.get("results") != null) {
                    ArrayList results = (ArrayList) response.get("results");
                    if (results.size() > 0)
                        ret = (String) ((LinkedHashMap) results.get(0)).get("formatted_address");
                }
                callback.onSucess(ret);
            }


        };
        request.addArgument("key", "AIzaSyCC9HSProR_c3ETwPjN0LQpr3UScor8NCE");
        request.addArgument("latlng", coord.getLatitude() + "," + coord.getLongitude());

        NetworkManager.getInstance().addToQueue(request);
    }

    public static Coord getCoords(String address) {
        Coord ret = null;
        try {
            ConnectionRequest request = new ConnectionRequest("https://maps.googleapis.com/maps/api/geocode/json", false);
            request.addArgument("key", "AIzaSyCC9HSProR_c3ETwPjN0LQpr3UScor8NCE");
            request.addArgument("address", address);

            NetworkManager.getInstance().addToQueueAndWait(request);
            Map<String, Object> response = new JSONParser().parseJSON(new InputStreamReader(new ByteArrayInputStream(request.getResponseData()), "UTF-8"));
            if (response.get("results") != null) {
                ArrayList results = (ArrayList) response.get("results");
                if (results.size() > 0) {
                    LinkedHashMap location = (LinkedHashMap) ((LinkedHashMap) ((LinkedHashMap) results.get(0)).get("geometry")).get("location");
                    ret = new Coord((double) location.get("lat"), (double) location.get("lng"));
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return ret;
    }

    public static void getCoordsAsync(String address, Callback callback) {
        ConnectionRequest request = new ConnectionRequest("https://maps.googleapis.com/maps/api/geocode/json", false) {
            @Override
            protected void readResponse(InputStream input) throws IOException {
                Coord ret = null;
                Map<String, Object> response = new JSONParser().parseJSON(new InputStreamReader(input, "UTF-8"));
                if (response.get("results") != null) {
                    ArrayList results = (ArrayList) response.get("results");
                    if (results.size() > 0) {
                        LinkedHashMap location = (LinkedHashMap) ((LinkedHashMap) ((LinkedHashMap) results.get(0)).get("geometry")).get("location");
                        ret = new Coord((double) location.get("lat"), (double) location.get("lng"));
                    }
                }
                callback.onSucess(ret);
            }


        };
        request.addArgument("key", "AIzaSyCC9HSProR_c3ETwPjN0LQpr3UScor8NCE");
        request.addArgument("address", address);

        NetworkManager.getInstance().addToQueue(request);
    }
    
    
    public void makeCase(boolean isDraft, String cde, Form cor, Tabs tab)
    {
        String caseLoc = "";
        Form f = new Form("New Report");
        String ty = "";
        if(!isDraft)
        {
            ty = ""+new Date().getTime();
        }
        else
        {
            ty = cde;
        }
        final String code = ty;
     
        f.setLayout(new BorderLayout());
        
        picAdded = new Container(BoxLayout.y());
        audioAdded = new Container(BoxLayout.y());
        videoAdded = new Container(BoxLayout.y());
        
        Container c = new Container(BoxLayout.y());
        c.setScrollableY(true);
        c.setUIID("CNT1");
        
        Label l = new Label("Category *");
        l.setUIID("RedLabel");
        Picker p = new Picker();
        p.setType(Display.PICKER_TYPE_STRINGS);
        p.setStrings(categories);
        c.addComponent(l);c.addComponent(p);
        Label t = new Label("Case Details *");
        t.setUIID("RedLabel");
        TextArea text = new TextArea();
        text.setUIID("TextAreaRed");
        text.setMaxSize(500);
        text.setRows(4);
        c.addComponent(t);c.addComponent(text);
        c.addComponent(new Label("Incidence Location *","RedLabel"));
        Container e = new Container(BoxLayout.y());
        //e.setUIID("CNT1");
            Container e1 = new Container(new GridLayout(1,2));
            Button r = new Button("Enter Address");
            e1.addComponent(r);
            Button s = new Button("Get on Map");
            e1.addComponent(s);
        final TextArea m = new TextArea();
        m.setRows(2);
        
            s.addActionListener(g -> {
            
                Form caseForm = f;
                removeTransitionsTemporarily(caseForm);
                Form ff = new Form("");
                ff.setLayout(new BorderLayout());
                ff.setTransitionInAnimator(CommonTransitions.createCover(CommonTransitions.SLIDE_VERTICAL, false, 300));
                ff.setTransitionOutAnimator(CommonTransitions.createUncover(CommonTransitions.SLIDE_VERTICAL, true, 300));        
                Container n = new Container(BoxLayout.y());
                SpanLabel sp = new SpanLabel("Zoom to location, then tap to retrieve address.");
                sp.setTextUIID("SpanCenter");
                n.addComponent(sp);
                Button v = new Button("Use my current location");
                final TextArea tx = new TextArea();
                v.addActionListener(w -> {
                    
                    final ToastBar.Status status = ToastBar.getInstance().createStatus();
                    status.setMessage("Getting your location...");
                    status.setShowProgressIndicator(true);
                    status.setIcon(createIcon(FontImage.MATERIAL_WORK));
                    status.show();
                    
                    String tok = writeLocation();
                    if(tok == null)
                    {
                        status.clear();
                        status.setMessage("There was a problem getting your location. Try again");
                        status.show();
                        status.setExpires(3000);
                        return;
                    }
                    List b = StringUtil.tokenize(writeLocation(), ",");
                    String lat = b.get(0).toString();
                    String lon = b.get(1).toString();
                    caseLocation = lat+","+lon;
                    Coord cd = new Coord(Double.parseDouble(lat), Double.parseDouble(lon));
                    String k = getFormattedAddress(cd);
                    if(!k.equals("error"))
                    {
                        tx.setText(k);
                        
                    m.setText(tx.getText());
                    if(m.getText().length()>0)
                    {
                        r.setText("Edit Address");
                    }
                    else
                    {
                        r.setText("Enter Address");
                    }
                    Dialog.show("Success", "You can edit the address for correctness and accuracy", "OK", null);
                    caseForm.showBack();
                    }else
                    {
                        Dialog.show("Error", "Error processing request", "OK", null);
                        caseForm.showBack();
                    
                    }
                    
                
                });
                tx.setEditable(false);
                tx.setUIID("TextAreaRed");
                tx.setRows(2);
                n.addComponent(v);
                ff.addComponent("North", n);
                
                String k = "0";
                try{
                    k = Storage.getInstance().readObject("LOCATION").toString();
                }catch(Exception er){k="0,0";}
                List mm = StringUtil.tokenize(k, ",");
                Coord location = null;
                if(!k.equals("0,0"))
                {
                    location = new Coord(Double.parseDouble(mm.get(0).toString()), Double.parseDouble(mm.get(1).toString()));
                }
                else
                {
                    location = new Coord(0,0);
                }
                MapContainer mc = new MapContainer(JS_API_KEY);
                mc.zoom(location, 15);
                mc.setShowMyLocation(true);
                mc.setCameraPosition(location);
                Style sf = new Style();
                sf.setFgColor(0xff0000);
                sf.setBgTransparency(0);
                FontImage markerImg = FontImage.createMaterial(FontImage.MATERIAL_PLACE, sf);
                EncodedImage icon = EncodedImage.createFromImage(markerImg, false);
                mc.addMarker(icon, location, "My position", null, null);
                mc.addTapListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent evt) {
                    Dialog ip = null;
                    boolean confirm = Dialog.show("Confirm", "Confirm incidence location...?", "YES", "NO");
                    if(!confirm)
                     {
                          return;
                     }
                    
                    ip = new InfiniteProgress().showInifiniteBlocking();
                    mc.clearMapLayers();
                    int x = evt.getX();
                    int y = evt.getY();
                    Coord coord = mc.getCoordAtPosition(x, y);
                    caseLocation = coord.getLatitude()+","+coord.getLongitude();
                    System.out.println(coord.getLatitude()+" "+coord.getLongitude());
                    Style s = new Style();
                    s.setFgColor(0xff0000);
                    s.setBgTransparency(0);
                    FontImage markerImg = FontImage.createMaterial(FontImage.MATERIAL_PLACE, s);
                    EncodedImage icon = EncodedImage.createFromImage(markerImg, false);
                    mc.addMarker(icon, coord, "My position", null, null);
                    String k = getFormattedAddress(coord);
                    if(!k.equals("error"))
                    {
                    tx.setText(k);
                    ip.dispose();
                    m.setText(tx.getText());
                    if(m.getText().length()>0)
                    {
                        r.setText("Edit Address");
                    }
                    else
                    {
                        r.setText("Enter Address");
                    }
                    Dialog.show("Success", "You can edit the address for correctness and accuracy", "OK", null);
                    caseForm.showBack();
                    }else
                    {
                        ip.dispose();
                        Dialog.show("Error", "Error processing request", "OK", null);
                        caseForm.showBack();
                    }
                }
                    });
                ff.addComponent("Center", mc);
                
                ff.getToolbar().setBackCommand("", ead -> {
                    caseForm.showBack();
                    });
                ff.show();
                
                
                
            });
        
        
            r.addActionListener(ee -> {
            
                Form caseForm = f;
                removeTransitionsTemporarily(caseForm);
                Form ff = new Form("Enter Address");
                ff.setLayout(new BorderLayout());
                Container cnt = new Container(BoxLayout.y());
                cnt.setUIID("CNT1");
                ff.setTransitionInAnimator(CommonTransitions.createCover(CommonTransitions.SLIDE_VERTICAL, false, 300));
                ff.setTransitionOutAnimator(CommonTransitions.createUncover(CommonTransitions.SLIDE_VERTICAL, true, 300));        
                TextArea ad = new TextArea();
                ad.setText(m.getText());
                ad.setUIID("TextAreaRed");
                ad.setMaxSize(500);
                ad.setRows(4);
                cnt.addComponent(ad);
                Button done = new Button("");
                FontImage.setMaterialIcon(done, FontImage.MATERIAL_DONE);
                cnt.addComponent(done);
                done.addActionListener(tt -> {
                    
                    if(ad.getText().length() > 5)
                    {
                        final ToastBar.Status status = ToastBar.getInstance().createStatus();
                        status.setMessage("Please wait a bit...");
                        status.setShowProgressIndicator(true);
                        status.setIcon(createIcon(FontImage.MATERIAL_WORK));
                        status.show();
                        try{Coord res = getCoords(ad.getText());
                        caseLocation = res.getLatitude()+","+res.getLongitude();
                        }catch(Exception er){caseLocation = 0.0+","+0.0;}
                        status.clear();
                    }
                    
                    m.setText(ad.getText());
                    if(m.getText().length()>0)
                    {
                        r.setText("Edit Address");
                        
                    }
                else
                {
                    r.setText("Enter Address");
                }
                    caseForm.showBack();
                });
                ff.getToolbar().setBackCommand("", ed -> {
                    caseForm.showBack();
                    });
                ff.addComponent("Center", cnt);
                ff.show();
            });
            
        e.addComponent(e1);
        m.setEditable(false);
        m.setUIID("TextAreaRed");
        e.addComponent(m);
        c.addComponent(e);
        
        
        
        Container n = new Container(new GridLayout(1,3));
        //n.setUIID("CNT1");
        Button a = new Button("Photo");
        FontImage.setMaterialIcon(a, FontImage.MATERIAL_CAMERA);
        a.setTextPosition(Label.BOTTOM);
        Button b = new Button("Audio");
        FontImage.setMaterialIcon(b, FontImage.MATERIAL_MIC);
        b.setTextPosition(Label.BOTTOM);
        Button d = new Button("Video");
        FontImage.setMaterialIcon(d, FontImage.MATERIAL_VIDEOCAM);
        d.setTextPosition(Label.BOTTOM);
        n.addComponent(a);n.addComponent(b);n.addComponent(d);
        a.addActionListener(ee -> chooseSource("photo", f, code, c, isDraft));
        b.addActionListener(ee -> chooseSource("audio", f, code, c, isDraft));
        d.addActionListener(ee -> chooseSource("video", f, code, c, isDraft));
        c.addComponent(n);
        
        Container added = new Container(new GridLayout(1,3));
        added.addComponent(picAdded);
        added.addComponent(audioAdded);
        added.addComponent(videoAdded);
            
            if(isDraft)
            {
                String sql = "select * from table1 where code='"+code+"'";
                List lx = queryRunner(sql);
                Object ba = lx.get(0);
                Map ma = (Map) ba;
                p.setSelectedString(ma.get("category").toString());
                ArrayList lt = new ArrayList();
                for(int bv =0; bv<categories.length; bv++)
                {
                    String ui = categories[bv];
                    lt.add(ui);
                }
                p.setSelectedStringIndex(lt.indexOf(ma.get("category")));
                Log.p(p.getSelectedStringIndex()+" i got there");
                text.setText(ma.get("details").toString());
                m.setText(ma.get("address").toString());
                if(FileSystemStorage.getInstance().exists(dir+"temp"+sep+code+".jpg"))
                {
                    NewMedia(picAdded, "photo", code, isDraft);
                }
                if(FileSystemStorage.getInstance().exists(dir+"temp"+sep+"audio"+code))
                {
                    NewMedia(audioAdded, "audio", code, isDraft);
                }
                if(FileSystemStorage.getInstance().exists(dir+"temp"+sep+"video"+code))
                {
                    NewMedia(videoAdded, "video", code, isDraft);
                }
            }
            
        c.addComponent(added);
        f.getToolbar().addMaterialCommandToRightBar("", FontImage.MATERIAL_DONE, 4, ed -> {
            
            if(p.getSelectedStringIndex() < 0 || text.getText().length() == 0 || m.getText().length() == 0)
                {
                    Dialog.show("Error","All required fields marked * must be completed","OK",null);
                    return;
                }
            
      
              String res = sendToCloud(code, p.getSelectedString(), text.getText(), m.getText(), cor, tab);
                if(res.equals("error") || res.equals("network"))
                {
                    ToastBar.Status tb = ToastBar.getInstance().createStatus();
                    tb.setMessage("There was a problem sending report. Try again");
                    tb.setExpires(3000);
                }
 
            
                
                
                });
        
        f.addComponent("Center",c);
        
        f.getToolbar().setBackCommand("", ex -> {
        
            if(isDraft == false)
            {
                if(p.getSelectedStringIndex() < 0 && text.getText().length() == 0 && m.getText().length() == 0 && picAdded.getComponentCount() == 0 && audioAdded.getComponentCount() == 0 && videoAdded.getComponentCount() ==0)
                {
                    System.out.println("okay...");
                    cleanUp(code);
                    cor.showBack();
                }
                else
                {
                    boolean confirm = Dialog.show("Confirm", "Do you want to save as draft..?", "YES", "NO");
                    if(!confirm)
                    {
                        cleanUp(code);
                        cor.showBack();
                    }
                    else
                    {
                        if(p.getSelectedString().length() < 2)
                        {
                            Dialog.show("Oops", "At least select a category saving", "Ok", null);
                            return;
                        }
                        if(picAdded.getComponentCount() > 0)
                        {

                        }
                        String sql  = "insert into table1 values('cor', '"+code+"', DateTime('now'),'true', '"+p.getSelectedString()+"', '"+text.getText()+"', '"+m.getText()+"', '"+(picAdded.getComponentCount()>0)+"', '"+(audioAdded.getComponentCount()>0)+"', '"+(videoAdded.getComponentCount()>0)+"')";
                        System.out.println(sql);
                        List lx = queryRunner(sql);
                        if(lx.contains("done"))
                        {
                            loadDrafts(cor, tab);
                            cor.showBack();
                        }
                        else
                        {
                            Dialog.show("Error", "Error saving draft"+lx.get(0), "OK", null);
                            cor.showBack();
                        }
                    }
                }

            }
            else
            {
                String sql  = "update table1 set rtype = 'cor', code='"+code+"', isDraft = 'true', category='"+p.getSelectedString()+"', details='"+text.getText()+"', address='"+m.getText()+"', photo='"+(picAdded.getComponentCount()>0)+"', audio='"+(audioAdded.getComponentCount()>0)+"', video='"+(videoAdded.getComponentCount()>0)+"' where code='"+code+"'";
                System.out.println(sql);
                List lx = queryRunner(sql);
                if(lx.contains("done"))
                {
                    loadDrafts(cor, tab);
                    cor.showBack();
                }
                else
                {
                    Dialog.show("Error", "Error saving draft"+lx.get(0), "OK", null);
                    cor.showBack();
                }
            }
        
        });
        
        
        f.show();
        
    }
    String response = "", res = "";
    public String sendToCloud(String code, String category, String details, String address, Form cor, Tabs tab)
    {
        
        
        
        ToastBar.Status status = ToastBar.getInstance().createStatus();
        status.setMessage("Sending case report...");
        status.setExpires(3000);
        status.setShowProgressIndicator(true);
        status.setIcon(createIcon(FontImage.MATERIAL_WORK));
        status.show();
                
                
                
        try
        {
            MultipartRequest request = new MultipartRequest()
            {
              int chr;
              StringBuffer sb = new StringBuffer(); 
              @Override
              protected void readResponse(InputStream input) throws IOException
              {
                //reading the answer                      
                while ((chr = input.read()) != -1)
                {
                  sb.append((char) chr);
                } 

                response = sb.toString();
                response = response.trim();
                System.out.println("this is response "+response);
                List r  = StringUtil.tokenize(response, "#");
                res = response;
                if (response.startsWith("saved"))
                {
                    //socket.send("latest##"+Storage.getInstance().readObject("cor"));
                    Map<String, Object> map = new JSONParser().parseJSON(new InputStreamReader(new ByteArrayInputStream(res.getBytes())));
                    ArrayList lx = (ArrayList) map.get("root");
                    Storage.getInstance().writeObject("SentData", lx);
                    Dialog.show("Success","Your case has been successfully sent. We shall contact you soon.", "OK",null);
                    String sql  = "insert into table1 values('cor', '"+code+"', DateTime('now'),'true', '"+category+"', '"+details+"', '"+address+"', '"+(picAdded.getComponentCount()>0)+"', '"+(audioAdded.getComponentCount()>0)+"', '"+(videoAdded.getComponentCount()>0)+"')";
                    queryRunner(sql);
                    queryRunner("update table1 set isDraft='sent' where code='"+code+"'");
                     loadDrafts(cor, tab);
                     parseData("all", cor, tab);
                     parseData("sent", cor, tab);
                     status.clear();
                     //loadAll(cor, true, tab);
                     //loadSent(cor, tab);
                     caseLocation = "";
                     cor.showBack();
                }
                else
                {
                    System.out.println("its an error response "+response);
                    status.clear();
                    res = "error";
                    status.setShowProgressIndicator(false);
                    status.setMessage("Please try again later");
                    status.setIcon(createIcon(FontImage.MATERIAL_ERROR));
                    status.setExpires(3000);
                    status.show();
                } 

              }  
              @Override
              protected void handleException(Exception err)
              {
                  System.out.println("handling error");
                  err.printStackTrace();
                  response = "error";
                  res = "network";
                  status.setShowProgressIndicator(false);
                  status.setMessage("Network error encountered. Please try again later.");
                  status.setIcon(createIcon(FontImage.MATERIAL_ERROR));
                  status.show();
                  // show this error message for 3 seconds, then hide automatically
                  status.setExpires(3000);
                }

            };
            request.setUrl(URL+"/add");
            request.setPost(true);
            request.addArgument("category", category);
            request.addArgument("details", details);
            request.addArgument("address", address);
            request.addArgument("audio", "false");
            request.addArgument("video", "false");
            request.addArgument("photo", "false");
            request.addArgument("code", code);
            request.addArgument("rtype", "cor");
            request.addArgument("userLocation", Storage.getInstance().readObject("LOCATION").toString());
            request.addArgument("caseLocation", caseLocation);
            request.addArgument("email", Storage.getInstance().readObject("email").toString());
            request.addArgument("sender", Storage.getInstance().readObject("name").toString());
            request.addArgument("phone", Storage.getInstance().readObject("phone").toString());
            request.addArgument("thumb", "0");
            if(audioAdded.getComponentCount() > 0)
            {
                request.removeArgument("audio");
                request.addArgument("audio", "true");
                request.addData("audioFile", dir  + "temp" + sep + "audio"+code, "");
            }else{request.addData("audioFile", dir  + "temp" + sep + "empty.jaji", "");}
            if(videoAdded.getComponentCount() > 0)
            {
                request.removeArgument("video");
                request.addArgument("video", "true");
                request.addData("videoFile", dir  + "temp" + sep + "video"+code, "");
            }else{request.addData("videoFile", dir  + "temp" + sep + "empty.jaji", "");}
            if(picAdded.getComponentCount() > 0)
            {
                request.removeArgument("photo");
                request.addArgument("photo", "true");
                request.addData("photoFile", dir  + "temp" + sep + code+".jpg", "");
            }else{request.addData("photoFile", dir  + "temp" + sep + "empty.jaji", "");}
            
            NetworkManager.getInstance().addToQueue(request);
        }
        catch(Exception er)
        {
            System.out.println("in main catch...");
            er.printStackTrace();
            response = "network";
            status.setShowProgressIndicator(false);
            status.setMessage("Network error ecountered. Ensure you have internet access.");
            status.setIcon(createIcon(FontImage.MATERIAL_ERROR));
            status.setExpires(3000);
            status.show();
            
        }
            
      
        return response;
    }
    
    public void cleanUp(String code)
    {
        FileSystemStorage.getInstance().delete(dir + "temp" + sep + code+".jpg");
        FileSystemStorage.getInstance().delete(dir + "temp" + sep +"audio"+code);
        FileSystemStorage.getInstance().delete(dir + "temp" + sep +"video"+code);
    }
    
    
    public boolean chooseSource(String type, Form parent, String code, Container p, boolean isDraft)
    {
        final Dialog dlg = new Dialog(BoxLayout.y());
        dlg.setOwner(parent);
        dlg.setTitle("Choose Source");
        Button camera = new Button("Camera");
        if(!type.equals("photo"))
        {
            camera.setText("Record");
        }
        if(type.equals("audio"))
        {
            if(audioAdded.getComponentCount() > 0)
            {
                Dialog.show("Hey","You already added audio. Delete first before adding a new one", null,"OK");
                return false;
            }
        }
        if(type.equals("video"))
        {
            if(videoAdded.getComponentCount() > 0)
            {
                Dialog.show("Hey","You already added video. Delete first before adding a new one", null,"OK");
                return false;
            }
        }
        if(type.equals("photo"))
        {
            if(picAdded.getComponentCount() > 0)
            {
                Dialog.show("Hey","You already added photo. Delete first before adding a new one", null,"OK");
                return false;
            }
        }
        
        Button gallery = new Button("Gallery");
        dlg.addComponent(camera);
        dlg.addComponent(gallery);
        dlg.setDisposeWhenPointerOutOfBounds(true);
        
        gallery.addActionListener(e -> {
        
            if(type.equals("photo"))
            {
                Display.getInstance().openImageGallery(new ActionListener() {
                InputStream is;
                @Override
                public void actionPerformed(ActionEvent evt) {
                try {
                    String path=evt.getSource().toString();
                    System.out.println(path);
                    Image image=Image.createImage(path);
                    String p = dir + "temp" + sep;
                    OutputStream save = FileSystemStorage.getInstance().openOutputStream(p+code+".jpg");
                    ImageIO.getImageIO().save(image, save,  ImageIO.FORMAT_JPEG, 0.85f);
                    NewMedia(picAdded, "photo", code, isDraft);
                    picAdded.revalidate();
                    dlg.dispose();
                } catch (IOException ex) {
                    System.out.println(ex.getMessage());
                }               
                    }
                });
            }
            
            if(type.equals("audio"))
            {
                if (FileChooser.isAvailable()) {
                    FileChooser.showOpenDialog(".3gp, .aa, .aac, .aax, .act, .aiff, .amr, .ape, .au, .awb, .m4a, .m4b, .m4p, .mp3, .ogg, .oga, .mogg, .opus, .wav, .wma text/plain", e2-> {
                        String file = (String)e2.getSource();
                        if (file == null) {
                            
                        } else {
                           String extension = null;
                           if (file.lastIndexOf(".") > 0) {
                               extension = file.substring(file.lastIndexOf(".")+1);
                           }
                               FileSystemStorage fs = FileSystemStorage.getInstance();
                               try {
                                   //InputStream fis = fs.openInputStream(file);
                                   String filePath = dir + "temp" + sep+"audio"+code;
                                   Util.copy(fs.openInputStream(file), fs.openOutputStream(filePath));
                                   NewMedia(audioAdded, "audio", code, isDraft);
                                   audioAdded.revalidate();
                                   dlg.dispose();
                               } catch (IOException ex) {
                                   Log.e(ex);
                               }
                        }
                    });
                }
            }
            
            
            if(type.equals("video"))
            {
                Display.getInstance().openGallery((xe) -> {
                if(xe != null && xe.getSource() != null) {
                String file = (String)xe.getSource();
                FileSystemStorage fs = FileSystemStorage.getInstance();
                try {
                    //InputStream fis = fs.openInputStream(file);
                    String filePath = dir + "temp" + sep+"video"+code;
                    Util.copy(fs.openInputStream(file), fs.openOutputStream(filePath));
                    NewMedia(videoAdded, "video", code, isDraft);
                    videoAdded.revalidate();
                    dlg.dispose();
                } catch (IOException ex) {
                    Log.e(ex);
                }
                }
                }, Display.GALLERY_VIDEO);
            }
            
        });
        
        camera.addActionListener(e -> {
        
        if(type.equals("photo"))
        {
            String pic = Capture.capturePhoto();
                System.out.println("this is pic "+pic);
                if(pic != null) {
                    try {
                        Image img = Image.createImage(pic);
                        String ts = dir +"temp"+sep;
                        OutputStream dest = FileSystemStorage.getInstance().openOutputStream(ts + code+".jpg");
                        ImageIO.getImageIO().save(img, dest, ImageIO.FORMAT_JPEG, 0.85f);
                        NewMedia(picAdded, "photo", code, isDraft);
                        picAdded.revalidate();
                        dlg.dispose();
                    } catch(IOException err) {
                        ToastBar.showErrorMessage("An error occured while saving the image: " + err);
                    }
                }
        }
        
        if(type.equals("audio") || type.equals("video"))
        {
            String file = "";
            String aud="";
            if(type.equals("audio"))
            {
               file =  Capture.captureAudio();
               aud = dir + "temp" + sep+"audio"+code;
            }
            if(type.equals("video"))
            {
                file =  Capture.captureVideo();
                aud = dir + "temp" + sep+"video"+code;
            }
            FileSystemStorage fs = FileSystemStorage.getInstance();
            if(file != null) {
                try
                {
                    final String filePath = aud;
                    Util.copy(fs.openInputStream(file), fs.openOutputStream(filePath));
                    if(type.equals("audio"))
                    {
                        NewMedia(audioAdded, "audio", code, isDraft);
                        audioAdded.revalidate();
                    }
                    else
                    {
                        NewMedia(videoAdded, "video", code, isDraft);
                        videoAdded.revalidate();
                    }
                    dlg.dispose();
                }
                catch(IOException er)
                {
                    er.printStackTrace();
                    ToastBar.showErrorMessage("An error occured while saving the media: " + er);
                }
            }
        }
        
        });
        dlg.show();
        return true;
    }
    
    
    public static void removeTransitionsTemporarily(final Form f) {
    final Transition originalOut = f.getTransitionOutAnimator();
    final Transition originalIn = f.getTransitionInAnimator();
    f.setTransitionOutAnimator(CommonTransitions.createEmpty());
    f.setTransitionInAnimator(CommonTransitions.createEmpty());
    f.addShowListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent evt) {
            f.setTransitionOutAnimator(originalOut);
            f.setTransitionInAnimator(originalIn);
            f.removeShowListener(this);
        }
    });
}
    
    
    public void NewMedia(Container c, final String type, final String code, final boolean isDraft)
    {
        Button x = new Button("");
        x.setUIID("MediaButton");
        FontImage.setMaterialIcon(x, FontImage.MATERIAL_PLAY_ARROW);
        c.addComponent(x);    
        Button j = new Button("");
        j.setUIID("MediaButton");
        FontImage.setMaterialIcon(j, FontImage.MATERIAL_DELETE);
        c.addComponent(j);
        
        x.addActionListener(e -> {
            viewMedia(type, code, c.getComponentForm(), true);
        });
        
        j.addActionListener(e -> {
            
            boolean confirm = Dialog.show("Confirm", "Confirm delete...?", "YES", "NO");
            if(!confirm)
            {
                return;
            }
            String dir1 = FileSystemStorage.getInstance().getAppHomePath() +sep + "creporter" + sep;
            if(type.equals("photo"))
            {
                String p = dir1 + "temp" + sep + code+".jpg";
                FileSystemStorage.getInstance().delete(p);
                c.removeAll();
                c.revalidate();
            }
            if(type.equals("audio"))
            {
                String p = dir1 + "temp" + sep + "audio"+code;
                FileSystemStorage.getInstance().delete(p);
                c.removeAll();
                c.revalidate();
            }
            if(type.equals("video"))
            {
                String p = dir1 + "temp" + sep + "video"+code;
                FileSystemStorage.getInstance().delete(p);
                c.removeAll();
                c.revalidate();
            }
        
        });
    }
    
    
    public void viewMedia(String type, String code, Form hostForm, boolean isDraft)
    {
        Form caseForm = hostForm;
            removeTransitionsTemporarily(caseForm);
            Form f = new Form("View Media");
            f.setTransitionInAnimator(CommonTransitions.createCover(CommonTransitions.SLIDE_VERTICAL, false, 300));
            f.setTransitionOutAnimator(CommonTransitions.createUncover(CommonTransitions.SLIDE_VERTICAL, true, 300));        
            Style bg = f.getContentPane().getUnselectedStyle();
            bg.setBgTransparency(255);
            //bg.setBgColor(0x000000);
            f.setLayout(new BorderLayout());
            String mediaPath = "";
            mediaPath = dir + "temp" + sep;
            if(type.equals("photo"))
            {
                if(!isDraft)
                {
                    try{

                        Util.downloadUrlToStorage(URL+"/getFile/"+code+"_photoFile", "photoFile.jpg", true);
                        InputStream is =  Storage.getInstance().createInputStream("photoFile.jpg");
                        EncodedImage i = EncodedImage.create(is, is.available());
                        ImageViewer imageViewer = new ImageViewer(i);
                        f.addComponent("Center", imageViewer);
                        is.close();
                        }catch(Exception er){er.printStackTrace();}
                }
                else
                {
                    mediaPath = mediaPath + code + ".jpg";
                    ImageViewer im = new ImageViewer();
                    System.out.println(mediaPath);
                    try
                    {
                        Image image=Image.createImage(mediaPath);
                        im.setImage(image);
                        f.addComponent("Center", im);
                    }catch(IOException er){}
                }
                
                f.getToolbar().setBackCommand("", ed -> {
                    Storage.getInstance().deleteStorageFile("photoFile.jpg");
                    Storage.getInstance().deleteStorageFile("videoFile");
                    Storage.getInstance().deleteStorageFile("audioFile");
                    caseForm.showBack();
                    });
            }
            if(type.equals("audio"))
            {
                mediaPath = mediaPath + "audio"+code;
                String toPlay = mediaPath;
                try
                {
                    if(!isDraft)
                    {
                        toPlay = URL+"/getFile/"+code+"_audioFile";
                    }
                    final Media mp = MediaManager.createMedia(toPlay, false);
                    f.addComponent("Center", new MediaPlayer(mp));
                    mp.prepare();
                    mp.play();
                    f.getToolbar().setBackCommand("", ed -> {
                    mp.pause();
                    mp.cleanup();
                    caseForm.showBack();
                    });
                }catch(IOException ee){ee.printStackTrace();}
            }
            if(type.equals("video"))
            {
                String toPlay = mediaPath + "video"+code;
                if(!isDraft)
                    {
                        toPlay = URL+"/getFile/"+code+"_videoFile";
                    }
                try
                {
                    Media mp = MediaManager.createMedia(toPlay, true);
                    f.addComponent("Center", new MediaPlayer(mp));
                    mp.prepare();
                    mp.play();
                    f.getToolbar().setBackCommand("", ed -> {
                        mp.pause();
                    mp.cleanup();
                    caseForm.showBack();
                    });
                }catch(IOException ee){ee.printStackTrace();}
            }
            f.show();
    }

    public String writeLocation()
    {
        String result = "";
        if (Display.getInstance().getLocationManager().isGPSDetectionSupported()) {
    if (Display.getInstance().getLocationManager().isGPSEnabled()) {
        Location loc = LocationManager.getLocationManager().getCurrentLocationSync(20000);
        if (loc != null) {
            double lat = loc.getLatitude();
            double lng = loc.getLongitude();
            Storage.getInstance().writeObject("LOCATION", lat+","+lng);
            result = lat+","+lng;
        } else {
            
        }
    } else {
        //Dialog.show("GPS disabled", "CReporter needs access to GPS. Please enable GPS", "Ok", null);
    }
} else {
    //Cancel after 20 seconds
    Location loc = LocationManager.getLocationManager().getCurrentLocationSync(20000);
    if (loc != null) {
        double lat = loc.getLatitude();
        double lng = loc.getLongitude();
        try {
            Storage.getInstance().writeObject("LOCATION", lat+","+lng);
            result = lat+","+lng;
        } catch (Exception ex) {
            
            ex.printStackTrace();
        }
    } else {
        
    }
}
        return result;
    }
    
    public void stop() {
        current = getCurrentForm();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = getCurrentForm();
        }
    }

    public void destroy() {
    }
    
    public class BackgroundLocationListener implements LocationListener {
    
    @Override
    public void locationUpdated(Location location) {
        Storage.getInstance().writeObject("LOCATION", location.getLatitude()+","+location.getLongitude());
        /*
        o.setText(location.getLatitude()+","+location.getLongitude());
        try{
            mc.clearMapLayers();
        Coord c = new Coord(location.getLatitude(), location.getLongitude());
        mc.zoom(c, 10);mc.setShowMyLocation(true);
        //mc.setMapType(MapContainer.MAP_TYPE_HYBRID);
        mc.setCameraPosition(c);
        Style s = new Style();
                    s.setFgColor(0xff0000);
                    s.setBgTransparency(0);
                    FontImage markerImg = FontImage.createMaterial(FontImage.MATERIAL_PLACE, s);
                    EncodedImage icon = EncodedImage.createFromImage(markerImg, false);
                    mc.addMarker(icon, c, "My position", null, null);
                    mc.revalidate(); }catch(Exception er){} */
    }

    @Override
    public void providerStateChanged(int newState) { }

        
    }
    
    
    private Image createIcon(char charcode) {
        int iconWidth = Display.getInstance().convertToPixels(8, true);
        Style iconStyle = new Style();
        Font iconFont = Font.createSystemFont(Font.FACE_SYSTEM, Font.STYLE_BOLD, Font.SIZE_LARGE);
        if (Font.isNativeFontSchemeSupported()) {
            iconFont = Font.createTrueTypeFont("native:MainBold", null).derive((int)(iconWidth * 0.5), Font.STYLE_BOLD);
        }
        iconStyle.setFont(iconFont);
        iconStyle.setFgColor(0xffffff);
        iconStyle.setBgTransparency(0);

        FontImage completeIcon = FontImage.createMaterial(charcode, iconStyle);
        return completeIcon;
    }
    

}


